{"version":3,"sources":["components/StepsForm.js","components/StepsTable.js","components/Steps.js","App.js","serviceWorker.js","index.js"],"names":["StepsForm","props","useState","date","distance","form","setForm","className","onSubmit","event","parseInt","preventDefault","htmlFor","dateFormat","selected","onSelect","prevForm","id","name","value","onChange","target","StepsTable","sorting","items","sort","a","b","Date","length","map","item","key","moment","format","type","onClick","onRemoveItem","Steps","steps","setSteps","newItem","nanoid","prevSteps","some","prevItem","isSame","filter","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.76145c75.chunk.js","sourcesContent":["import React, { useState } from \"react\";\nimport DatePicker from \"react-datepicker\";\nimport \"react-datepicker/dist/react-datepicker.css\";\n\nconst StepsForm = (props) => {\n  const [form, setForm] = useState({\n    date: \"\",\n    distance: \"\",\n  });\n\n  const dateChange = (date) => {\n    setForm((prevForm) => ({\n      ...prevForm,\n      date,\n    }));\n  };\n\n  const inputChange = (event) => {\n    const name = event.target.name;\n    const value = event.target.value;\n\n    setForm((prevForm) => ({\n      ...prevForm,\n      [name]: value,\n    }));\n  };\n\n  const submitHandle = (event) => {\n    if (form.date !== null && form.distance !== \"\") {\n      props.onSubmit({\n        ...form,\n        distance: parseInt(form.distance),\n      });\n      setForm({\n        date: \"\",\n        distance: \"\",\n      });\n    }\n\n    event.preventDefault();\n  };\n\n  return (\n    <form className=\"form\" onSubmit={submitHandle}>\n      <div className=\"div\">\n        <label htmlFor=\"date\">Дата (ДД.ММ.ГГ)</label>\n        <DatePicker\n          dateFormat=\"dd.MM.yyyy\"\n          selected={form.date}\n          onSelect={dateChange}\n        />\n      </div>\n      <div className=\"div\">\n        <label htmlFor=\"distance\">Пройдено км</label>\n        <input\n          id=\"distance\"\n          name=\"distance\"\n          value={form.distance}\n          onChange={inputChange}\n        />\n      </div>\n      <div className=\"div submitDiv\">\n        <button className=\"submitButton\">Ок</button>\n      </div>\n    </form>\n  );\n};\n\nexport default StepsForm;\n","import React from \"react\";\nimport moment from 'moment';\n\nconst StepsTable = (props) => {\n  const sorting = [...props.items];\n  sorting.sort((a, b) => new Date(b.date) - new Date(a.date));\n\n  return (\n    sorting.length > 0 && (\n      <table className=\"table\">\n        <thead>\n          <tr>\n            <th>Дата (ДД.ММ.ГГ)</th>\n            <th>Пройдено км</th>\n            <th>Действия</th>\n          </tr>\n        </thead>\n        <tbody>\n          {sorting.map((item) => (\n            <tr key={item.id}>\n              <td>{moment(item.date).format('DD.MM.YYYY')}</td>\n              <td>{item.distance}</td>\n              <td>\n                <button\n                  className=\"removeButton\"\n                  type=\"button\"\n                  onClick={() => props.onRemoveItem(item.id)}\n                >\n                  ✘\n                </button>\n              </td>\n            </tr>\n          ))}\n        </tbody>\n      </table>\n    )\n  );\n};\n\nexport default StepsTable;\n","import React, { useState } from \"react\";\nimport { nanoid } from \"nanoid\";\nimport moment from \"moment\";\n\nimport StepsForm from \"./StepsForm\";\nimport StepsTable from \"./StepsTable\";\n\nconst Steps = () => {\n  const [steps, setSteps] = useState([]);\n\n  const formSubmitHandle = (item) => {\n    const newItem = {\n      ...item,\n      id: nanoid(8),\n    };\n\n    setSteps((prevSteps) => {\n      if (\n        prevSteps.some((prevItem) => moment(prevItem.date).isSame(item.date))\n      ) {\n        return prevSteps.map((prevItem) => {\n          if (moment(prevItem.date).isSame(item.date)) {\n            return {\n              ...prevItem,\n              distance: prevItem.distance + item.distance,\n            };\n          }\n\n          return prevItem;\n        });\n      }\n\n      return [...prevSteps, newItem];\n    });\n  };\n\n  const itemRemoveHandle = (id) => {\n    setSteps((prevSteps) => {\n      return prevSteps.filter((item) => item.id !== id);\n    });\n  };\n\n  return (\n    <>\n      <StepsForm onSubmit={formSubmitHandle} />\n      <StepsTable items={steps} onRemoveItem={itemRemoveHandle} />\n    </>\n  );\n};\n\nexport default Steps;\n","import React from \"react\";\nimport \"./App.css\";\n\nimport Steps from \"./components/Steps\";\n\nfunction App() {\n  return (\n    <div className=\"container\">\n      <div className=\"background-element\"> </div>{\" \"}\n      <div className=\"highlight-window\">\n        <div className=\"highlight-overlay\"> </div>{\" \"}\n      </div>{\" \"}\n      <div className=\"window\">\n        <Steps />\n      </div>{\" \"}\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}